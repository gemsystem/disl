plugins {
    id "com.github.hierynomus.license" version "$hierynomusLicenseVersion"
    id "maven-publish"
    id "signing"
    id "groovy"
    id "java-library-distribution"
}

project.group = 'com.github.gemsystem'
project.version = "1.4.0-SNAPSHOT"

sourceCompatibility = 1.8
targetCompatibility = 1.8

repositories {
    mavenLocal()
    mavenCentral()
}

dependencies {
    implementation "org.codehaus.groovy:groovy-all:$groovyVersion"
    implementation "org.slf4j:slf4j-api:$slf4jVersion"
    implementation "junit:junit:$junitVersion"
    testImplementation "org.hsqldb:hsqldb:$hsqldbVersion"
    testRuntimeOnly "org.slf4j:slf4j-simple:$slf4jVersion"
    testRuntimeOnly fileTree(dir: 'lib', include: '*.jar')
}

license {
    header rootProject.file('HEADER.txt')
    ext.year = Calendar.getInstance().get(Calendar.YEAR)
    skipExistingHeaders = true
}

task sourcesJar(type: Jar, dependsOn: classes) {
    classifier 'sources'
    from sourceSets.main.allSource
}

groovydoc {
    //exclude files causing groovydoc to fail
    exclude 'org/disl/db/oracle/OracleReverseEngineeringService.groovy'
}

task groovydocJar(type: Jar, dependsOn: groovydoc) {
    classifier = 'javadoc'
    from groovydoc
}

artifacts {
    archives groovydocJar, sourcesJar
}

signing {
    if (!version.endsWith("SNAPSHOT")) {
        sign configurations.archives
    }
}

publishing {
    publications {
        mavenJava(MavenPublication) {
            pom {
                name = 'disl'
                description = 'disl = data integration specific language. Goal of this project is to implement groovy based domain specific language supporting modelling of data integration projects. Disl will support data modeling and data mapping including support for MDA transformations and unit testing.'
                url = 'https://github.com/gemsystem/disl'
                licenses {
                    license {
                        name = 'GNU GENERAL PUBLIC LICENSE, Version 3.0'
                        url = 'http://www.gnu.org/licenses/gpl.txt'
                        distribution = 'repo'
                    }
                }
                developers {
                    developer {
                        name = 'GEM System a.s.'
                        email = 'disl@gemsystem.cz'
                        organization = 'GEM System a.s.'
                        organizationUrl = 'https://www.gemsystem.cz'
                    }
                }
                scm {
                    connection = 'scm:git:git@github.com:gemsystem/disl.git'
                    developerConnection = 'scm:git:git@github.com:gemsystem/disl.git'
                    url = 'https://github.com/gemsystem/disl'
                }
                issueManagement {
                    system = 'GitHub'
                    url = 'https://github.com/gemsystem/disl/issues'
                }
            }
            repositories {
                def releasesRepoUrl = "http://maven.gem.local/nexus/content/repositories/free/"
                def snapshotRepoUrl = "http://maven.gem.local/nexus/content/repositories/snapshots/"
                maven {
                    url = version.endsWith("SNAPSHOT") ? snapshotRepoUrl : releasesRepoUrl
                    credentials {
                        username = gemMavenUserPublish
                        password = gemMavenPasswordPublish
                    }
                }
            }
        }
    }
}
